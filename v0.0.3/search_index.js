var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API","title":"API Reference","text":"","category":"section"},{"location":"api/#CHMMAIRRa.detect_chimeras-Tuple{Tuple{Vector{String}, Vector{String}}, DataFrames.DataFrame}","page":"API","title":"CHMMAIRRa.detect_chimeras","text":"detect_chimeras(V_db::Tuple{Vector{String}, Vector{String}}, assignments::DataFrame;\n                J_db::Union{Tuple{Vector{String}, Vector{String}}, Nothing} = nothing,\n                p_threshold::Float64 = 0.95,\n                min_DFR::Int = 1,\n                HMM_parameters::Union{Dict, Nothing} = nothing,\n                receptor::String = \"IG\",\n\n                chimeric_alignments::Bool = false,\n                recombfreqplot::Bool = false,\n                detailed::Bool = false,\n                subsample::Union{Int, Nothing} = nothing,\n                deduplicate::Bool = false,\n\n\n                count_chimeric_segments::Bool = false,\n                trim::Int = 5,\n                seed::Int = 123,\n\n                mafft::Union{String, Nothing} = nothing,\n                align_database::Bool = false,\n\n                quiet::Bool = false,\n                disable_internal_dedup::Bool = false\n                )::NamedTuple{(:out, :chimeric_alignments, :recombfreqplot),\n                            Tuple{DataFrame,\n                            Union{Nothing, Tuple{Vector{String}, Vector{String}}},\n                            Any}\n                            }\n                }\n\nRun CHMMAIRRa on parsed arguments, returning output as a Tuple containing relevant outputs. Output tuple fields:\n\nout: the input assignments dataframe with chimerism probabilities.\nchimericalignments: names and sequences for alignments showing which reference sequences recombined at which positions to form detected chimeras. Set to nothing if chimericalignments is false.\nrecombfreqplot: barplot of most frequent recombinations, normalized by their expected frequencies. Set to nothing if recombfreqplot is false.\n\nArguments:\n\nV_db::Tuple{Vector{String}, Vector{String}}: Tuple containing (reference names, reference sequences) for the V database.\nassignments::DataFrame: VDJ assignments, in MiAIRR format.\n\nOptional arguments:\n\nJ_db::Union{Tuple{Vector{String}, Vector{String}}, Nothing}: Optional tuple containing (reference names, reference sequences) for the J database. If provided, will run on both V and J and the sequence will be chimeric if either V or J is chimeric.\np_threshold::Float64: Posterior threshold of switching templates.\nmin_DFR::Int: Minimum differences from reference (DFR) threshold to consider a recombination event.\nHMM_parameters::Union{Dict, Nothing}: If set, use HMM parameters in this dictionary. Overrides parameter presets from receptor.\nreceptor::String: Which adaptive immune receptor to run on. Options: IG, TCR.\nchimeric_alignments::Bool: Whether to generate and return chimeric sequences and the germline alignments they matched to.\nrecombfreqplot::Bool: Whether to generate and return a plot of chimerism per recombination event.\ndetailed::Bool: Whether to include details about the chimeras. Calculate viterbi path for chimeric sequences to add startingpoint, recombinations, recombinationsdegapped, and maxlog_prob columns.\nsubsample::Union{Int, Nothing}: Randomly subsample this number of unique sequences to run chimera detection on.\ndeduplicate::Bool: Whether to deduplicate input by vsequencealignment column. Note that if subsample is given, subsampling is performed after deduplication.\ncount_chimeric_segments::Bool: If set, count the number of times chimeric segments appear in nonchimeric sequences. Adds chimerasegmentcounts column.\ntrim::Int: How many nucleotides to trim off the inner ends of the chimeric segments when searching for matches in nonchimeric sequences.\nseed::Int: Seed to use for random subsampling.\nmafft::Union{String, Nothing}: Path to MAFFT binary. If not provided, will try to find mafft in system PATH.\nalign_database::Bool: Whether to align database sequences.\nquiet::Bool: If set, hides non-error messages.\ndisable_internal_dedup::Bool: If set, does not deduplicate sequences internally. This was added for timing benchmark purposes and has no effect on the output.\n\n\n\n\n\n","category":"method"},{"location":"api/#CHMMAIRRa.detect_chimeras-Tuple{Vector{String}, Vector{String}, DataFrames.DataFrame, Char}","page":"API","title":"CHMMAIRRa.detect_chimeras","text":"detect_chimeras(refnames::Vector{String}, refseqs::Vector{String}, assignments::DataFrame, gene::Char;\n                p_threshold::Float64 = 0.95,\n                min_DFR::Int = 1,\n                HMM_parameters::Union{Dict, Nothing} = nothing,\n                receptor::String = \"IG\",\n\n                chimeric_alignments::Bool = false,\n                recombfreqplot::Bool = false,\n                detailed::Bool = false,\n                subsample::Union{Int, Nothing} = nothing,\n                deduplicate::Bool = false,\n\n\n                count_chimeric_segments::Bool = false,\n                trim::Int = 5,\n                seed::Int = 123,\n\n                mafft::Union{String, Nothing} = nothing,\n                align_database::Bool = false,\n\n                quiet::Bool = false,\n                disable_internal_dedup::Bool = false\n                )::NamedTuple{(:out, :chimeric_alignments, :recombfreqplot),\n                            Tuple{DataFrame,\n                            Union{Nothing, Tuple{Vector{String}, Vector{String}}},\n                            Any}\n                            }\n                }\n\nRun CHMMAIRRa on parsed arguments, returning output as a Tuple containing relevant outputs. Output tuple fields:\n\nout: the input assignments dataframe with chimerism probabilities.\nchimericalignments: names and sequences for alignments showing which reference sequences recombined at which positions to form detected chimeras. Set to nothing if chimericalignments is false.\nrecombfreqplot: barplot of most frequent recombinations, normalized by their expected frequencies. Set to nothing if recombfreqplot is false.\n\nArguments:\n\nrefnames::Vector{String}: Names of the reference sequences.\nrefseqs::Vector{String}: Sequences of the reference sequences.\nassignments::DataFrame: VDJ assignments, in MiAIRR format.\ngene::Char: Which gene to run on. Options: 'v', 'j'.\n\nOptional arguments:\n\np_threshold::Float64: Posterior threshold of switching templates.\nmin_DFR::Int: Minimum differences from reference (DFR) threshold to consider a recombination event.\nHMM_parameters::Union{Dict, Nothing}: If set, use HMM parameters in this dictionary. Overrides parameter presets from receptor.\nreceptor::String: Which adaptive immune receptor to run on. Options: IG, TCR.\nchimeric_alignments::Bool: Whether to generate and return chimeric sequences and the germline alignments they matched to.\nrecombfreqplot::Bool: Whether to generate and return a plot of chimerism per recombination event.\ndetailed::Bool: Whether to include details about the chimeras. Calculate viterbi path for chimeric sequences to add startingpoint, recombinations, recombinationsdegapped, and maxlog_prob columns.\nsubsample::Union{Int, Nothing}: Randomly subsample this number of unique sequences to run chimera detection on.\ndeduplicate::Bool: Whether to deduplicate input by vsequencealignment column. Note that if subsample is given, subsampling is performed after deduplication.\ncount_chimeric_segments::Bool: If set, count the number of times chimeric segments appear in nonchimeric sequences. Adds chimerasegmentcounts column.\ntrim::Int: How many nucleotides to trim off the inner ends of the chimeric segments when searching for matches in nonchimeric sequences.\nseed::Int: Seed to use for random subsampling.\nmafft::Union{String, Nothing}: Path to MAFFT binary. If not provided, will try to find mafft in system PATH.\nalign_database::Bool: Whether to align database sequences.\nquiet::Bool: If set, hides non-error messages.\ndisable_internal_dedup::Bool: If set, does not deduplicate sequences internally. This was added for timing benchmark purposes and has no effect on the output.\n\n\n\n\n\n","category":"method"},{"location":"api/#CHMMAIRRa.detect_chimeras_from_files-Tuple{String, String, String}","page":"API","title":"CHMMAIRRa.detect_chimeras_from_files","text":"detect_chimeras_from_files(V_fasta::String, assignments::String, out::String;\n\n        receptor::String = \"IG\",\n        J_fasta::Union{String, Nothing} = nothing,\n\n        non_chimeric_MiAIRR::Union{String, Nothing} = nothing,\n        chimeric_MiAIRR::Union{String, Nothing} = nothing,\n        chimeric_alignments::Union{String, Nothing} = nothing,\n        recombfreqplot::Union{String, Nothing} = nothing,\n        detailed::Bool = false,\n        subsample::Union{Int, Nothing} = nothing,\n        deduplicate::Bool = false,\n        chunk_size::Union{Int, Nothing} = nothing,\n       \n        p_threshold::Float64 = 0.95,\n        min_DFR::Int = 1,\n        HMM_parameters::Union{String, Nothing} = nothing,\n        mafft::Union{String, Nothing} = nothing,\n        align_database::Bool = false,\n        count_chimeric_segments::Bool = false,\n        trim::Int = 5,\n        seed::Int = 123,\n\n        quiet::Bool = false,\n        disable_internal_dedup::Bool = false\n        )\n\nRun CHMMAIRRa from input files to writing of output files, taking care of I/O.\n\nArguments:\n\nV_fasta::String: V database in fasta format.\nassignments::String: VDJ assignments, in MiAIRR format.\nout::String: Write CHMMAIRRa output.\n\nOptional arguments:\n\nreceptor::String: Which adaptive immune receptor to run on. Options: IG, TCR.\nJ_fasta::Union{String, Nothing}: J database in fasta format. If provided, will run on both V and J and the sequence will be chimeric if either V or J is chimeric.\nnon_chimeric_MiAIRR::Union{String, Nothing}: Write assignments of sequences determined to be non-chimeric.\nchimeric_MiAIRR::Union{String, Nothing}: Write assignments of sequences determined to be chimeric.\nchimeric_alignments::Union{String, Nothing}: Write fasta file containing chimeric sequences and the germline alignments they matched to.\nrecombfreqplot::Union{String, Nothing}: Generate a plot of chimerism per recombination event.\ndetailed::Bool: Include details about the chimeras. Calculate viterbi path for chimeric sequences to add startingpoint, recombinations, recombinationsdegapped, and maxlog_prob columns.\nsubsample::Union{Int, Nothing}: Randomly subsample this number of unique sequences to run chimera detection on.\ndeduplicate::Bool: Deduplicate input by vsequencealignment column. Note that if subsample is given, subsampling is performed after deduplication.\nchunk_size::Union{Int, Nothing}: Read in chunk-size lines of input at a time, write output for that chunk, and move to the next chunk.\np_threshold::Float64: Posterior threshold of switching templates.\nmin_DFR::Int: Minimum differences from reference (DFR) threshold to consider a recombination event.\nHMM_parameters::Union{String, Nothing}: If set, use HMM parameters in this file. Overrides parameter presets from –receptor. See src/IGparameters.tsv or src/TCRparameters.tsv for formatting.\nmafft::Union{String, Nothing}: Path to MAFFT binary. If not provided, will try to find mafft in system PATH.\nalign_database::Bool: Whether to align database sequences.\ncount_chimeric_segments::Bool: If set, count the number of times chimeric segments appear in nonchimeric sequences. Adds chimerasegmentcounts column.\ntrim::Int: How many nucleotides to trim off the inner ends of the chimeric segments when searching for matches in nonchimeric sequences.\nseed::Int: Seed to use for random subsampling.\nquiet::Bool: If set, hides non-error messages.\ndisable_internal_dedup::Bool: If set, does not deduplicate sequences internally. This was added for timing benchmark purposes and has no effect on the output.\n\n\n\n\n\n","category":"method"},{"location":"api/#CHMMAIRRa.julia_main-Tuple{}","page":"API","title":"CHMMAIRRa.julia_main","text":"julia_main()::Cint\n\nEntry point C call for main function for Julia\n\n\n\n\n\n","category":"method"},{"location":"outputs/#Output-columns","page":"Outputs","title":"Output columns","text":"","category":"section"},{"location":"outputs/#Mandatory-columns","page":"Outputs","title":"Mandatory columns","text":"","category":"section"},{"location":"outputs/","page":"Outputs","title":"Outputs","text":"v_threaded : The query V sequence threaded onto the database alignment.\nv_chimera_probability : The probability of the V sequence being a chimera.\nv_chimeric : Whether v_chimera_probability is greater than the threshold.\nchimeric : If j_chimeric exists, it's v_chimeric | j_chimeric. If j_chimeric doesn't exist, chimeric = v_chimeric ","category":"page"},{"location":"outputs/#Optional-columns-generated-when-using-the-detailed-arg","page":"Outputs","title":"Optional columns generated when using the --detailed arg","text":"","category":"section"},{"location":"outputs/","page":"Outputs","title":"Outputs","text":"v_startingpoint : The nonchimeric starting state of the viterbi path (i.e. the HMM's v_call).\nv_recombinations : A list of recombination points according to the viterbi path of the query. Format: (vcall 1, vcall 2, recombination position in threaded query sequence).\nv_recombinations_degapped : Same as recombinations, but with the non-gapped position of the recombination.\nv_pathevaluation : The probability of the second likeliest reference in the HMM. This gives us a measure of confidence for the recombination path itself.\nv_nrecombinations : The number of recombination points in the viterbi path.","category":"page"},{"location":"outputs/#Optional-outputs-generated-when-using-the-count-chimeric-segments-arg","page":"Outputs","title":"Optional outputs generated when using the --count-chimeric-segments arg","text":"","category":"section"},{"location":"outputs/","page":"Outputs","title":"Outputs","text":"v_segment_1_count : The number of times the left chimeric segment appears in nonchimeric sequences.\nv_segment_2_count : The number of times the right chimeric segment appears in nonchimeric sequences.","category":"page"},{"location":"outputs/","page":"Outputs","title":"Outputs","text":"The same columns, with the prefix j_ instead of v_ will be produced if the J_fasta argument is provided.","category":"page"},{"location":"outputs/#Chimeric-alignments","page":"Outputs","title":"Chimeric alignments","text":"","category":"section"},{"location":"outputs/","page":"Outputs","title":"Outputs","text":"The tool can also output a fasta file containing alignments between chimeric sequences and their correspond germline genes. Also adds hamming_distances columns to the output file, indicating the number of mismatches between the chimeric and germline sequences.","category":"page"},{"location":"outputs/","page":"Outputs","title":"Outputs","text":"CHMMAIRRa --receptor IG --V-fasta V.fasta --assignments MiAIRR.tsv \\\n          --out CHMMAIRRa_out.tsv --chimeric-alignments chimeric_alignments.fasta","category":"page"},{"location":"outputs/#Recombination-occurrences-plot","page":"Outputs","title":"Recombination occurrences plot","text":"","category":"section"},{"location":"outputs/","page":"Outputs","title":"Outputs","text":"Sometimes missing database sequences can cause overrepresented recombinations. To generate a barplot of the top 10 recombinations normalized by their expected frequency, use the --recombfreqplot argument.","category":"page"},{"location":"outputs/","page":"Outputs","title":"Outputs","text":"CHMMAIRRa --receptor IG --V-fasta V.fasta --assignments MiAIRR.tsv \\\n          --out CHMMAIRRa_out.tsv --recombfreqplot recombfreqplot.txt","category":"page"},{"location":"outputs/","page":"Outputs","title":"Outputs","text":"By default, the plot is produced using unicode. To produce an svg/pdf using Plots.jl, you'll need to load it with using Plots and run CHMMAIRRa as a Julia package.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"<!-- Include badges from README -->\n<div class=\"raw-html-chunk\">","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"# Include just the badges section from README\nimport Markdown\ncontent = read(joinpath(dirname(@__FILE__), \"..\", \"..\", \"README.md\"), String)\n# Extract the badge section (first few lines until the first empty line)\nMarkdown.parse(content)","category":"page"}]
}
